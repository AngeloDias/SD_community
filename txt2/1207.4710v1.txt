shown to be PSPACE-complete by reduction from QSAT. For the stochastic
version, membership in PSPACE was shown, however only #P-hardness was
established by reduction from the st-reliability problem, leaving the question
of PSPACE-hardness open. Apparently proving the stronger result requires
some form of dependency between the edges, achieved “through the back
door” in the adversarial variant. This paper settles the question, showing
that CTP is indeed PSPACE-complete.
Since the size of an optimal policy is potentially exponential in the size
of the problem description, we in fact show that it is PSPACE-hard to find
even the optimal first action at s.
We begin with a variant of CTP with dependent directed edges, CTPDep, which allows for a simple proof of PSPACE-hardness by reduction from
QSAT, before proceeding with the proof for the “standard” stochastic CTP.
Although the latter result subsumes the former, proving the dependent CTP
result first greatly simplifies the intuition behind the proof of the standard
case.
Another variant we explore is remote-sensing CTP, henceforth called
Sensing-CTP, in which additional actions called remote-sensing actions are
allowed. Each such action reveals, for a certain cost, the status of a nonincident edge. Recently it was shown [9] that stochastic CTP can be solved
in low-order polynomial time on disjoint-path graphs. It was believed that
generalizing CTP to allow remote-sensing actions makes the problem harder
– indeed we show that allowing remote-sensing makes CTP NP-hard even
on disjoint-path graphs.
2

2. Dependent directed CTP is PSPACE-hard
This general form of dependent CTP (called CTP-Dep) is a 5-tuple
(G, w, s, t, B) with G = (V, E) a directed graph, a weight function w : E →
<≥0 , s, t ∈ V are the start and goal vertices respectively, and a distribution
model B over binary random variables indexed by the edges E. We assume
that B is specified as a Bayes network over these random variables E [11]
as follows. Each random variable expresses the state (blocked, unblocked)
of an edge in E (abusing notation we use the symbols indicating the edges
to denote the respective random variables). The Bayes network (E, A, P )
consists of a set of directed arcs A between the random variables E, so that
(E, A) is a directed acyclic graph. P describes the conditional probability
tables, one for each e ∈ E.
Theorem 1. CTP-Dep is PSPACE-hard.
Proof. by reduction from QSAT [12]. Recall that QSAT is the language of
all satisfiable quantified boolean formulas (QBF), Φ = ∀x1 ∃x2 ...ϕ(x1 , x2 , ..., xn ),
where ϕ is a boolean formula in conjunctive normal form, with n variables
and m clauses, which contain literals, each is consisting of either a variable
or a negated variable. We assume that each clause has at most 3 literals.
Given a QBF Φ, construct a CTP-Dep instance (GΦ , w, s, t, B) as follows
(see Fig. 1). GΦ consists of a variables section, and an exam section. Vertices in the variables section have labels starting with v or o, and vertices of
the exam section begin with r. An always unblocked edge (s, t), called the
default edge, has a cost of h. All other edges, unless mentioned otherwise,
are zero-cost edges known to be unblocked.
The variables section contains a subsection Xi for every variable xi ,
which begins at vi , and ends at vi0 . For every i < n, Xi is connected to Xi+1
through an edge (vi0 , vi+1 ).
Every Xi contains a true-path (vi , vi1 , · · · , vim , vi0 ), and a false-path (vi , v̄i1 , · · · , v̄im , vi0 ).
If xi is a universal variable (resp. existential variable), the edges (vi , vi1 ),
and (vi , v̄i1 ) are called universal edges (resp. existential edges). While the
existential edges are always unblocked, we set the universal edges to have
have blocking probability 1/2 and to be mutually exclusive: for each universal variable xi , exactly one of (vi , vi1 ), and (vi , v̄i1 ) is blocked.
In addition, for every 1 ≤ i ≤ n, and 1 ≤ l ≤ m, there are edges (oil , vil ),
and (ōil , v̄il ), called observation edges. These edges are only meant to be
observed, as their source vertices are unreachable. Every observation edge
3

∀x1

o11 o12
s

v11
v1
v̄11

h

o1m

∃x2
o21 o22

v21
v1m v10 v2

v22

v2m v20

v̄12

v̄1m

v̄22

v̄2m

ō11 ō12

ō1m

ō21 ō22

on1 on2

o2m

v12

v̄21

∃xn

vn1
vn
v̄n1

vn2

vnm

v̄n2

v̄nm

ōn1 ōn2

ō2m

variables section
t

t

onm

ōnm
r1

r10
1
r20

1

r0
r2

exam section
Figure 1: Reduction from QBF to CTP-Dep. Note that vertex t appears twice in order
to simplify the physical layout.

is blocked with probability 1/2, and the dependency of the observation edges
is defined according to appearance of variables in the clauses of Φ, as follows:
an observation edge (oil , vil ) (resp. (ōil , v̄il )) is considered “in” a clause Cl
if xi appears unnegated (resp. negated) in clause Cl . All observation edges
that are “in” the same clause Cl co-occur: they are either all traversable or
all are blocked (with probability 1/2, as stated above), independent of all
other edges that are not “in” Cl .
The exam section consists of an odd-path (r0 , r1 , r10 , t), and an even-path
(r0 , r2 , r20 , t). In addition construct edges (r1 , t), and (r2 , t) with cost 1. The
edges (r1 , r10 ), and (r2 , r20 ) are called choice edges. The edge (r1 , r10 ) (resp.
(r2 , r20 )) is unblocked if and only if the observation edges are unblocked for
an odd (resp. even) number of clauses. Hence exactly one of the choice edges
is blocked 1 . If at least one observation edge in each clause is observed, the
status of the choice edges can be determined with certainty. Otherwise the
posterior blocking probability of each choice edge remains 1/2. In order to
prove the theorem, it is sufficient to prove the following claim:
Claim 1. An optimal policy has expected cost 0 just when Φ is satisfiable
1

Note that as every clause has at most three literals, this dependency structure can be
realized with a Bayes network of constant in-degree, a construction that has polynomial
size.

4

vn0

(in which case the optimal first action is to traverse (s, v1 )). Otherwise (for
n
any h < 2− 2 −1 ) the optimal policy is to traverse (s, t) with a cost of h.
Proof. Suppose first that Φ is satisfiable. Then there is a policy for assigning values to all the existential variables, each given every setting of the
enclosing universal variables, such that ϕ is true. Following this policy for
each existential variable xi , i.e. traversing edge (vi , vi1 ) if xi should be true,
and (vi , v̄i1 ) otherwise, leads (by construction) to following a path such that
at least one observation edge is seen in every clause. Hence, the “exam” is
passed (i.e. the 0-cost unblocked path in the exam section is chosen) with
certainty.
Next, suppose Φ is not satisfiable. Then there is at least one setting
of the universal variables for which some clause Cl is false under the same
conditions, and thus no edge “in” clause C is observed. Since every setting
n
of these variables occurs with probability 2− 2 (assuming w.l.o.g. that n is
even), in these cases the exam is “flunked” (picking the path where only
the expensive edge is unblocked) with probability 1/2, and thus the total
n
expected cost of starting with (s, v1 ) is at least 2− 2 −1 . Hence, setting h <
n
2− 2 −1 , the optimal policy is to traverse (s, t) if and only if Φ is not satisfiable.

3. Complexity of CTP
Having shown that CTP-Dep is PSPACE-hard, we extend the proof to
the “standard” stochastic independent undirected edges CTP:
Theorem 2. CTP is PSPACE-complete.
In order to prove Theorem 2, we use the same general outline of the
reduction from QBF as in the proof of Theorem 1. However, in CTPDep, dependencies and directed edges restrict the available choices, thereby
simplifying the proof. Here we introduce special gadgets that limit choice de
facto, and show that any deviation from these limitations is necessarily suboptimal. Policies that obey these limitation are called reasonable policies.
Each such gadget g has an entry terminal Entry(g), and an exit terminal
Exit(g); an attempt to traverse g from Entry(g) to Exit(g) is henceforth
called to cross g. The gadgets operate by allowing a potential shortcut to
the target t; crossing these gadgets may either end up at Exit(g), with some
probability q(g), or at t instead. The edges that allow direct access to t are
called shortcut edges.
5

We introduce the gadgets in sections 3.1 and 3.2, and the CTP-graph
construction in Section 3.3. The actual proof of Theorem 2 is in Section
3.4. In the description of the gadgets and CTP-graph, we sometimes add
zero cost always traversable edges. These edges, which appear unlabeled in
figures 2,3 and 4, were added solely in order to simplify the physical layout
as a figure; any u, v connected by such an edge can be considered to be the
same vertex.
3.1. Baiting Gadgets
A baiting gadget g = BG(u, v) with parameter L > 1 is a three-terminal
weighted graph (see Fig. 2): an entry terminal u = Entry(g), an exit
terminal v = Exit(g), and a shortcut terminal which is always t. The latter
terminal is henceforth omitted in external reference to g, for conciseness.
The baiting gadget consists of N + 1 uniform sections of an undirected
path (u, v1 , · · · , vN , v) with total weight L, each intermediate vertex has a
0-cost shortcut to t with a blocking probability 1/2. In addition, there is a
shortcut edge with cost L from the terminals u, v to t. Set N = 2dlog2 (4L)e −1.
We assume that g is connected to the graph such that any policy executed
at u, in which the edge (u, v1 ) is not traversed, has an expected cost of
at least 1. Later on we see that this assumption holds in the CTP-graph
construction.
Let π be the following partial policy: when at u for the first time, proceed
along the path (u, v1 , · · · , vN , v) to v, taking the 0-cost shortcut to t whenever
possible, but never backtracking to u.
It is easy to show that even if we need to take the cost L shortcut at v,
the expected cost of executing π at u for the first time is less than 1. Because
of the L cost shortcut edge (v, t), the expected cost of any optimal policy
once at v (knowing all 0-cost shortcuts are blocked) is no more than L, hence
under any reasonable policy, g is not retraced. A similar argument holds for
retracing to u from other locations along the path (u, v1 , · · · , vN , v). Hence
we have:
Claim 2. When at u for the first time, π is optimal for a baiting gadget
BG(u, v) with a parameter L > 1. After reaching v, it is suboptimal to
backtrack to u in g.
Note that g is actually symmetric w.r.t. u, v. However, since by construction of the CTP-graph, every reasonable policy always reaches one
designated terminal u first, we treat g externally as if it were directional. A
6

t

L
u

L
N +1

0| 12
v1

L
N +1

v2

0| 12

0| 12

L

vN

L
N +1

v

Figure 2: A Baiting Gadget BG(u, v) with a parameter L > 1. Edge label w|p denotes
cost|blocking probability. The optimal policy at u is to cross the path (u, v1 , · · · , vN , v),
taking a shortcut edge to t whenever such an edge is found unblocked. After reaching v,
retracing to u in g costs at least L.

precise derivation of the parameters of baiting gadgets appears in Appendix
A.1.
3.2. Observation Gadgets
An observation gadget g = OG(u, v, o) is a four-terminal weighted graph
(see Fig. 3): an entry terminal u = Entry(g), an exit terminal v = Exit(g),
an observation terminal o, and a shortcut terminal (again omitted in external references) which is always t. The observation gadget begins with a baiting gadget BG1 = BG(u, v1 ) with parameter L > 8, which is connected to
the “observation loop” beginning with a baiting gadget BG2 = BG(v1 , v2 )
with parameter 3L/2, a zero-cost edge (v2 , v3 ) with blocking probability
3/4, and a cost L1 = 5L/8 unblocked edge to o. An always unblocked 3L/2
shortcut edge (v2 , t) is assumed. The observation loop is closed by a cost L1
unblocked edge to v4 and a zero-cost edge (v4 , v1 ) with blocking probability
3/4. From v1 , a cost 1 unblocked edge (v1 , v 0 ) followed by a baiting gadget
BG3 = BG(v10 , u) with parameter L completes the gadget.
We assume that o is either not directly connected to the rest of the
graph, or connected through a path (r2 , r3 , r4 , r5 , r10 , r20 ) called the exam
section path (o is identified with r5 ) with the following properties: the
edges (r2 , r3 ), (r10 , r20 ) and (r4 , r5 ), have zero cost and blocking probability
p1 , where p1 > 1 − 2/(3L + 1). (r2 , r3 ) and (r10 , r20 ) are called guard edges,
(r4 , r5 ) is called an observation edge. The edges (r3 , r4 ) and (r5 , r10 ) are
always traversable edges with cost 1. The vertex o is allowed to coincide
with observation terminals of other observation gadgets. The notations of
7

u

v1

BG1

t

BG2

3L
2

v10

1

BG3

v

0| 34

v2

v4

0| 34
v3

L1

L1
o
r2

r3
0|p1

1

r10

r5

r4
0|p1

1

r20
0|p1

the exam section path

Figure 3: An Observation Gadget OG(u, v, o). Light gray arrows indicate general traversal direction of the optimal policy π.

the exam section path are chosen to match the description of the CTP-graph
construction in Section 3.3.
Let πg be the following partial policy at g: when at u, cross BG1 . Then
(observing (v1 , v4 )), cross BG2 . If either (v2 , v3 ), or (v1 , v4 ) is found blocked,
reach t by traversing the cost 3L/2 shortcut edge (v2 , t). However, if both
(v2 , v3 ) and (v1 , v4 ) are unblocked, traverse (v2 , v3 , o, v4 , v1 , v10 ) (observing
any edges incident on o such as the observation edge (r4 , r5 )), and cross
BG3 .
Again, by construction of the CTP-graph (section 3.3), any policy at u
other than crossing BG1 results in a cost of at least 1.
Claim 3. When at u for the first time, πg is an optimal policy for g.
Proof Outline. Properties of the baiting gadgets ensure that g is traversed in the correct order. The guard edges (r2 , r3 ) and (r10 , r20 ) ensure that
it is suboptimal to “escape” from o by traversing edges in the exam section.
The uncertain edges (v4 , v1 ) and (v2 , v3 ) ensure that it is suboptimal to enter
a previously uncrossed observation gadget from o. Likewise for a previously
crossed observation gadget g 0 : entering g 0 through o is suboptimal because
8

all the baiting gadgets in g 0 have been crossed and observed to contain no
unblocked zero-cost shortcuts.
Detailed derivation of the properties of observation gadgets appears in
Appendix A.2.
3.3. CTP-graph Construction

o11
v11
1| 12

o1m

0
v12
v1m

OG

false-path
0
v̄1m
v̄12

1| 12

v̄11 OG OG
ō11 ō12

t

∃x2

o2m
0
0
v
v
OG OG 22 2mOG v2m
1
1
true-path
o21

o22

v21

v10 BG v2

v00

h

0
v1m

1

true-path

BG v1

1

s

o12

OG OG

variables section

∀x1

1

OG v̄0
1m
ō1m

1

false-path
0 v̄
2m
v̄22

OG
v̄21 OG
ō21
ō22

v20

vn0

1

OG v̄0
2m
ō2m

t
L
1
r0

0|p1 0|p1

r1
1

r1
2

0|p1 1
1 0|p1
0|p1 1
1 0|p1
e
2 r2
2 e2 r 2 r 3
r1 r1 1 r1 r2
r
r
3 4
5
2
1
3
4
5
1

1
rm
3

0|p1

1 0|p1 0|p1
em m
m+1
r
r
5
2

1

t
r

m+1
4

exam section
z0

BG

z1

BG

z2

guards section

zm+1

BG

zm+2

Figure 4: CTP-graph construction for Φ = ∀x1 ∃x2 · · · (x̄1 ∨ x̄2 ) ∧ (x̄1 ∨ x2 ) · · · . BG a baiting gadget. OG - an observation gadget. Light gray arrows indicate the general
traversal direction of the optimal policy when Φ is satisfiable.

Having shown the properties of the baiting and observation gadgets, we
are ready to construct the CTP-graph: For a QBF Φ with n variables and m
clauses, we construct GΦ in the same general outline as the construction of
the CTP-Dep graph (see section 2) with the following changes (see Fig. 4).
The exam section is a path of 5(m+1)+1 vertices {rji |1 ≤ i ≤ m+1, 1 ≤ j ≤
5} as follows. For every 0 < i ≤ m+1, (r1i , r2i ), (r2i , r3i ) and (r4i , r5i ) have zero
cost and blocking probability p1 , apart from (r4m+1 , r5m+1 ) which has zero cost
and is always traversable. (r1i , r2i ), and (r2i , r3i ) are called guard edges, and
9

(r4i , r5i ) is called a clause edge. (r3i , r4i ) and (r5i , r1i+1 ) are always traversable
cost 1 edges. In addition, the exam section holds an additional vertex r0 ,
an always traversable cost 1 edge (r0 , r11 ), and an always traversable cost
L edge (r0 , t). In order to guarantee correct operation of the observation
gadgets, we disallow reasonable policies to traverse exam edges too early
while crossing the variable section. This is done by visiting the initially
uncertain guard edges only later via a section called the guards section,
which consists of a sequence of baiting gadgets BG(zi , zi+1 ) with parameter
L that visit r2i for all 0 ≤ i ≤ m + 1.
The variables section is constructed as for CTP-Dep, except that the
directed edges (vi0 , vi+1 ) are replaced by baiting gadgets BG(vi0 , vi+1 ) with
parameter L. For each universal variable xi the universal edges (vi , vi1 ), and
(vi , v̄i1 ) are cost 1 edges with blocking probability 1/2. For each existential
variable xi , the existential edges (vi , vi1 ), and (vi , v̄i1 ) are always traversable
edges with cost 1. Inside each true-path, every (vij , oij ), (vij , vi(j+1) ) pair
is replaced by an observation gadget g = OG(vij , vij0 , oij ). (vij0 , vi(j+1) ) are
always unblocked zero-cost edges added for clarity. The observation vertex
oij is identified with the vertex incident on the appropriate clause edge in
the exam section. That is, if xi appears unnegated in clause j, then oij of
the true-path is identified with r5j in the exam section. Likewise respectively
for all the edges in the false-paths.
For example, Fig. 4 demonstrates the reduction for Φ = ∀x1 ∃x2 · · · (x̄1 ∨
x̄2 ) ∧ (x̄1 ∨ x2 ) · · · . The variable x1 appears negated in clause 2, so in GΦ
the vertex ō12 at the section X1 , and the vertex r52 of the exam section are
connected by an unlabeled edge, hence the clause edge e2 = (r42 , r52 ) can be
0
observed from the observation gadget OG(v̄12 , v̄12
, ō12 ) when traversing the
false path of X1 . Likewise, the connection of other observation gadgets can
be explained similarly.
3.4. Proof of Theorem 2
Given a QBF Φ with n variables and m clauses, we construct GΦ as in
3L+1
Section 3.3. Set L = 8m + 16 and p1 = 1 − 2−dlog2 ( 2 )e . We show that it
is optimal to traverse (s, v0 ) if and only if Φ is satisfiable.
Unless stated otherwise, we henceforth consider only reasonable policies
for GΦ that do not begin with the default action of traversing (s, t). Due to
properties of the gadgets (claims 2, 3) any reasonable policy π for GΦ must
follow the restrictions in Table 1, as any other action is suboptimal.
Most of these restrictions are immediate consequences of executing optimal policies at the baiting and observation gadgets (see Appendix A.1 and
10

Table 1: Reasonable policy actions in π

Location
vi0 , for i < n
vi , for i ≤ n,
vil , for i ≤ n,
v̄il for i ≤ n,
zl , for 0 < l ≤ m + 2
r0

Action
cross BG(vi0 , v1+1 )
go to vi1 or v̄i1
cross OG(vil , vil0 , oil )
cross OG(v̄il , v̄il0 , ōil )
cross BG(zl , zl−1 )
pass exam or take shortcut

Appendix A.2 for detail). The following claim, proved in Appendix B.1,
shows the actions of any reasonable policy for GΦ at r0 .
Claim 4. At r0 , any reasonable policy acts as follows:
• If all the edges in the exam section were observed to be unblocked,
cross (r0 , r11 , · · · , r4m+1 , t) until reaching t for a cost of 2(m + 1).
• Otherwise, cross the cost L shortcut edge (r0 , t).
Therefore, reasonable policies for GΦ differ only in the choices made in
the universal and existential edges, and in the choice at r0 which is either
to traverse the exam section if all clause edges were observed, or otherwise
take the expensive shortcut (r0 , t).
Now let π be a reasonable policy for GΦ , and denote the expected cost of
π by C(π). Define a weather to be an assignment of {traversable, blocked}
to the edges of GΦ . Let W be the set of all possible weathers for GΦ , and
for w ∈ W let pw be the probability that weather w occurs. Define C(π, w)
to be the cost of executing π over a weather w. Then
X
C(π) =
pw C(π, w)
(1)
w∈W

Next, partition W into full-trip weathers W f (π), in which r0 is reached
while executing π; and shortcut weathers W s (π) in which r0 is not reached
due to taking a shortcut edge to t before reaching r0 . Then:
X
X
C(π) =
pw C(π, w) +
pw C(π, w)
(2)
w∈W s (π)

w∈W f (π)

11

Let π T be a policy for GΦ such that in every subsection Xi of the variables
section, whenever possible, the true-path is always chosen. Define:
X
Dst =
pw C(π T , w)
(3)
w∈W s (π T )

As all the true-paths, and false-paths of all the variables section are symmetric in the number of observation gadgets and other edges, there is a bijection
gπ : W s (π) → W s (π T ) such that pw = pgπ (w) and C(π, w) = C(π T , gπ (w))
for every w ∈ W s (π). Hence we have:
X
Dst =
pw C(π, w)
w∈W s (π)

and
C(π) = Dst +

X

pw C(π, w)

(4)

w∈W f (π)

Again, due to symmetry, and the properties of the baiting and observation
gadgets (claims 2, 3), the total cost from s to r0 while executing π in any
weather w ∈ W f (π) is independent of w. We denote this cost by Dpt ,
and can compute it simply by summing the cost of traversing from s to r0
through the variable section and guard section, assuming that r0 is reached.
Then we get:
19mL + 4
)n + (n + m + 1)L
(5)
4
Then from r0 to t the cost is either 2(m + 1) (if the exam section is known
to be completely unblocked), or L > 2(m + 1) (taking the shortcut (r0 , t),
if some edges in the exam section are known to be blocked, or some such
unknown edges remain). Hence for any full-trip weather w, C(π, w) is either
Dpt + L, or Dpt + 2(m + 1).
Let PΦπ ∈ [0, 1] be the probability that not all the clause edges of the
exam section were observed in a full-trip weather by following π (this probability depends on the formula Φ). Then, with probability (1 − PΦπ )(1 −
p1 )3m+2 all the edges of the exam section were observed and were found
unblocked before reaching r0 . Let Prt = (1 − p1 )3m+2 be the probability
that all the edges in the exam section are unblocked and denote by Pr0 the
probability of reaching r0 by executing π. Again, due to symmetry of the
baiting and observation gadgets, Pr0 is independent of π. We get:
12
Dpt = 1 + (2 +

X

pw C(π, w) = Pr0 (Dpt +PΦπ L+(1−PΦπ )(Prt 2(m+1)+(1−Prt )L) (6)

w∈W f (π)

And therefore
C(π) = Dst + Pr0 (Dpt + PΦπ L + (1 − PΦπ )(Prt 2(m + 1) + (1 − Prt )L)) (7)
If Φ is satisfiable, then, as in the proof of Theorem 1, there is a reasonable
policy π which follows the assignments that satisfy Φ, thus every clause edge
is observed, and PΦπ = 0. Define B0 = C(π) for such a policy π when Φ is
satisfiable. Then
B0 = Dst + Pr0 (Dpt + Prt 2(m + 1) + (1 − Prt )L)

(8)

If Φ is not satisfiable, then at some universal subsection Xi of the variables section, there is a probability of at least 1/4 that a universal edge
must be traversed, such that upon reaching r0 , not all the clause edges are
n
visited. Hence, in total, there is a probability of at least ( 41 ) 2 that not all
the clause edges are visited. Note that as Pr0 already excludes events where
both universal edges are blocked for some variable, if Φ is not satisfiable,
n
then for every reasonable policy π, PΦπ > ( 31 ) 2 . Hence define B1 as follows.
1 n
1 n
B1 = Dst + Pr0 (Dpt + ( ) 2 L + (1 − ( ) 2 )(Prt 2(m + 1) + (1 − Prt )L)) (9)
3
3
Then B1 > B0 , and if Φ is not satisfiable, then C(π) ≥ B1 . Now let
n
h = w((s, t)) = B0 + ( 41 ) 2 mPr0 , so that B1 > h > B0 . Thus the optimal
action at s is to traverse (s, t) if and only if Φ is unsatisfiable. Since the
CTP-graph construction used a polynomial number of vertices, and all the
weights and probabilities by construction need only a polynomial number
of bits (see Appendix B.2 for the technical computation of h), Theorem 2
follows.

Several corollaries follow due to the construction of GΦ :
Corollary 1. It is PSPACE-hard to determine the expected cost of the optimal policy in CTP.
By replacing all the edges with appropriately directed edges, we get:
13

Corollary 2. CTP with directed edges but no dependencies is PSPACEcomplete.
Finally, as every unknown edge in this construction of GΦ has cost 0
and a probability which is a power of 2 of being unblocked (the universal
edges, for example, can be split into a two-edge path), we can replace every
unknown edge with a path of zero-cost, blocking probability 1/2 edges and
get:
Corollary 3. CTP remains PSPACE-complete even if all the unknown
edges have zero cost and blocking probability 1/2.
4. Complexity of CTP with remote sensing
A somewhat more general version of CTP is Sensing-CTP. In this variant, the state of graph edges can be remotely sensed at any time, paying
a known cost. Formally, Sensing-CTP is defined exactly the same way as
stochastic CTP, w.r.t. the graph, edge-blocking probabilities and weights,
and source and target vertices (see Section 1). In addition, a sensing cost
function SC : V × E → <+ is given. An edge e, not necessarily incident
on a vertex v, can be sensed for a cost SC(v, e) and as a result, the true
state of e is revealed. The problem in Sensing-CTP is to find a policy which
minimizes the total expected sensing cost plus travel cost from s to t.
CTP is solvable in polynomial time when the graph consists of edgedisjoint paths which meet only at s and t [9]. This gives rise to the question
whether Sensing-CTP is also tractable for disjoint paths. We show that this
is not the case for Sensing-CTP unless P=NP. Again, since the size of the
policy may be exponential in the size of the graph, we actually show that
it is NP-hard to determine even the first action in an optimal policy.
Theorem 3. Sensing-CTP is NP-hard even in disjoint-path graphs.
Proof. By reduction from the NP-complete problem vertex cover (VC)
[12]. Let G = (V, E) be an undirected graph, for which we need to decide
if there is an S ⊆ V of size at most k such that every edge in E is incident
on a vertex in S (S is called a vertex cover of size k). The idea of the proof
is, informally, for a policy to benefit if it ’has sensed’ all of the edges in a
given VC instance, where sensing of all neighbors of a vertex can be done at
some constant cost. By tweaking constants, these actions will be beneficial
14

if and only if it is possible to sense all edges in the VC instance by sensing
the neighbors of at most k vertices.
Construct the corresponding CTP-PATH graph G0 = (V 0 , E 0 ) as follows
(see Fig. 5). For each vertex v ∈ V , construct a “vertex” node f (v) ∈ V 0 ,
an edge (s, f (v)) with a cost C defined below, and an infinite-cost edge
(f (v), t). Also construct the “default edge” (s, t) with cost 4. The above
edges are always traversable.
Construct the “sensing path”, a path consisting of a
“leader” always traversable edge e0 with cost L starting at s, and for
each edge e ∈ E, a zero-cost edge f (e) in sequence, and finally an infinitecost edge (u, t). The probability that each of the latter edges is blocked
is , a small positive number defined below, except for (u, t) which has
infinite-cost, therefore is never traversable. Additionally, we have a two
edge “uncertain” path ((s, x), (x, t)) where (s, x) is always traversable and
costs 2, and (x, t) is traversable with probability 1/2 and costs 0. Note that
the resulting graph G0 consists only of edge-disjoint paths leading from s to
t.

f (v1 )
C

f (v|V | )

C
s

∞
∞

0|
L
e0 f (e1 )

0| sensing path 0|
∞
u
f (e|E| )
f (e2 )

t

0| 12

2
”uncertain” path

x
4
Figure 5: CTP-graph for reduction from vertex cover

The sensing cost from “vertex” node f (v) on edge f (e) is 0 for all e
incident on v in G. Sensing (x, t) costs 0 from u. All other sensing costs
15

are infinite. We show that for parameter values defined below, the optimal
policy is to immediately traverse (s, t) if and only if G does not have a
vertex cover of size k.
Assuming no sensing, there are only two “reasonable” traversal policies:
traversing (s, t) immediately for a cost of 4, or trying the uncertain path,
which costs 2 if (x, t) is traversable, and 8 if not, for an expected cost of
5. Thus the optimal policy with no sensing is to traverse (s, t). However, if
sensing is allowed, the “value of information” of knowing whether (x, t) is
traversable is: V OI(x, t) = 4 − (2 × 1/2 + 4 × 1/2) = 1, due to the fact that
if (x, t) is revealed as traversable (which happens with probability 1/2) we
gain 2 by taking the ”‘uncertain”’ path instead of (s, t), and otherwise gain
nothing.
We show below that for appropriate values of L, it is not beneficial to
try to get to u in order to sense (x, t) unless sensing reveals that the path
to u is unblocked. The probability that at least one edge on the sensing
path is blocked is at least . However, all the edges in the sensing path can
be sensed (stopping if any blocked edge is sensed) for a cost Csense defined
below. If G has a vertex cover of size k, then Csense ≤ 2Ck by visiting k
“vertex” nodes. However, if the smallest vertex cover is of size k 0 ≥ k + 1,
the expected sensing cost becomes:
0

Csense

k Y
i−1
X
= 2C
(1 − )dj ≥ 2Ck 0 (1 − )|E|

(10)

i=1 j=1

where dj is the number of previously unsensed edges of the jth vertex in
the (unknown) optimal sensing order. For any 0 < α < 1, set  such that
=1−(

1
k + 1 − α |E|
)
k+1

Then, as 2Ck 0 (1 − )|E| ≥ 2C(k + 1 − α), we have that

Now set L =

1
2

−


4

Csense ≥ 2C(k + 1 − α)
and:
C=

(1 − )|E|
2(2k + 1 − α)

To complete the proof, it is sufficient to prove the following claim:
16

Claim 5. The optimal action at s is to traverse (s, t) if and only if G does
not have a vertex cover of size k.
Proof. We show the following:
• If there is no cover in size k, the optimal policy is to traverse (s,t).
• Otherwise, the optimal policy is as follows: visit the “vertex” nodes
constituting the cover, doing the appropriate sensing actions; if the
sensing path is unblocked, visit u in order to sense (x, t), and then
take the path from s to t through x if (x, t) is found traversable. (In
this case, given the optimal policy, one can straightforwardly construct
the vertex cover of size k.)
Note that it is suboptimal to try the sensing path unless assured that all
edges leading to u are traversable, because then there is at least one edge
that can be blocked with probability , in which case attempting this path
results in no positive gain. To see this, note that the traversal cost 2L must
be paid anyway, thus the total expected gain from trying the sensing path
is:

1 
g ≤ (1 − )V OI(x, t) − 2L = 1 −  − 2L = 1 −  − 2( − ) = − < 0
2 4
2
This also holds for all policies that attempt some sensing actions before
trying the sensing path, but that do not make sure that u is reachable before
trying the sensing path.
Now, if there is a vertex cover of size k, the expected cost of sensing
all edges in the sensing path is at most 2Ck. If u is found to be reachable
(prior probability (1 − )|E| of that happening) use the sensing path (which
costs 2L) to sense (x, t), gaining the expected V OI(x, t) of 1. The total
expected gain in this case is positive:

(1 − )|E|
g ≥ (1−) (V OI(x, t)−2L)−2Ck = (1−) (1−(1− ))−2k
2
2(2k + 1 − α)
0

|E|

|E|

1
2k
= (1 − )|E| ( −
)>0
2 2(2k + 1 − α)

Finally, if there is no vertex cover of size k, then the expected gain for
sensing in the best case is (assuming the policy of sensing all edges in the
17

sensing path from only k + 1 “vertex” nodes, costing at least 2C(k + 1 − α)
in expectation) is at most:
g 00 ≤ (1 − )|E| (V OI(x, t) − 2L) − 2C(k + 1 − α) =
(1 − )|E|

(1 − )|E| (1 − (1 − )) − 2(k + 1 − α)
2
2(2k + 1 − α)
1
2(k + 1 − α)
= (1 − )|E| ( −
)<0
2 2(2k + 1 − α)

and thus the optimal policy here is not to perform sensing at all, but to
traverse (s, t) immediately.

5. Discussion
Having shown that stochastic CTP is PSPACE-hard, several related
questions on variants of CTP and CTP with restricted topologies arise. One
issue of particular interest is the question of efficiently finding approximately
optimal actions. The proofs in this paper make use of rather small gaps
between expected values of two candidate actions, and thus leave open the
possibility of efficient approximation algorithms.
Studies of the competitive analysis of the Canadian Traveler Problem
reveal rudimentary bounds on approximability. Denoting by k the number of uncertain edges in an instance, there exists for the undirected case
polynomial-time algorithms achieving competitive ratios of 2k + 1 [6]. As a
consequence, stochastic CTP can be approximated within 2k + 1. With a
slightly improved analysis, the same algorithm yields a 2n+1-approximation.
In the directed case, existing results from competitive analysis only yield
approximations of 2k+1 + 1 and 2n+1 + 1, respectively [5].
These approximation algorithms forego entirely the stochastic nature of
the problem and leave open considerable improvements. At the time of this
writing, no notable hardness of approximation results are known.
Another issue is: what is the most general graph topology under which
CTP is tractable or easy to approximate? An efficient algorithm was shown
[9] for disjoint-path graphs, based on a lemma that there exists an optimal
policy that is committing: (such a policy never returns to the source vertex
unless its ’current’ path to the target vertex is known to be blocked). But
any departure from the disjoint-path structure (such as adding even one
more edge that crosses between vertices in two of the paths) complicates
things considerably by voiding the optimality of committing policies.
18

The st-reliability problem (finding the probability that an unblocked
path from s to t exists) appears to be an essential building block in solving
CTP. The reduction in [1] shows that CTP is intractable for almost any
graph topology for which st-reliability is intractable as well. An open research question is whether CTP is tractable or easy to approximate for graph
topologies in which st-reliability is tractable, such as “tree-structured” graphs,
or the more general series-parallel graphs.
Sensing-CTP is generally harder than CTP for restricted topologies,
as shown in Section 4. Other variants of CTP, such as CTP-Dep, are also
harder than CTP, as dependencies can act like remote sensing. It was shown
that CTP-Dep is NP-hard for disjoint path graphs [13]. However, when
considering topological restrictions, one must also consider the topology of
the dependency-graph, and the hardness proof in [13] used an essentially
unrestricted topology Bayes network to represent the dependencies.
6. Acknowledgments
This research is partially supported by the Israel Science Foundation
grant 305/09, the Lynn and William Frankel Center for Computer Sciences,
and by ERC Advanced Investigator Grant 226203.
References
[1] C. H. Papadimitriou, M. Yannakakis, Shortest Paths Without a Map, Theor. Comput. Sci. 84 (1) (1991) 127–150.
[2] A. Bar-Noy, B. Schieber, The Canadian Traveller Problem, in: SODA, 1991, pp.
261–270.
[3] E. Nikolova, D. R. Karger, Route Planning under Uncertainty: The Canadian Traveller Problem, AAAI (2008) 969–974.
[4] G. H. Polychronopoulos, J. N. Tsitsiklis, Stochastic shortest path problems with
recourse, Networks 27 (2) (1996) 133–143.
[5] Y. Xu, M. Hu, B. Su, B. Zhu, Z. Zhu, The canadian traveller problem and its
competitive analysis, J. Comb. Optim. 18 (2) (2009) 195–205.
[6] S. Westphal, A note on the k-Canadian Traveller Problem, Inf. Process. Lett. 106 (3)
(2008) 87–89.
[7] P. Eyerich, T. Keller, M. Helmert, High-Quality Policies for the Canadian Traveler’s
Problem, in: In Proceedings of the Twenty-Fourth AAAI Conference on Artificial
Intelligence (AAAI 2010), 2010.
[8] Z. Bnaya, A. Felner, D. Fried, O. Maksin, S. E. Shimony, Repeated-task canadian
traveler problem, in: SOCS, 2011.
[9] Z. Bnaya, A. Felner, S. Shimony, Canadian Traveler Problem with Remote Sensing,
IJCAI (2009) 437–442.

19

[10] C. Wenner, Hardness results for the shortest path problem under partial observability, Diploma Thesis, Lund University.
[11] J. Pearl, Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference, Morgan Kaufmann, San Mateo, CA, 1988.
[12] M. Garey, D. Johnson, Computers and Intractability, W.H. Freeman, 1979.
[13] D. Zarchy, Theoretical and experimental analysis of the canadian traveler problem,
Master Thesis, Ben-Gurion University of the Negev.

Appendix A.
Appendix A.1. Baiting Gadgets
Let g = BG(u, v) be a baiting gadget with a parameter L > 1, defined
in Section 3.1 (see Fig. 2). Recall that π (as defined in Section 3.1) is the
following policy for g: At u, traverse (u, v1 ). At vi , for any i < N , do as
follows: if (vi , t) is unblocked, reach the destination through (vi , t) for cost of
zero. However, if (vi , t) is blocked, traverse (vi , vi+1 ) for a cost of L/(N +1).
At vN , if (vN , t) is blocked, traverse (vN , v).
By construction of the CTP-graph, we assume that any policy other
than traversing (u, v) results in a cost of at least 1 (see Section 3.1).
Apart from π, other policies at u that are not clearly suboptimal are:
• choose not to traverse (u, v1 ).
• The following type of policies denoted by πj , for j ≤ N : execute π
until reaching vj ; if (vj , tj ) is unblocked, reach the destination through
(vj , tj ); otherwise, retreat to u and execute an optimal policy with an
expected cost of Mj ≥ 1.
Finally, we set N = 2dlog2 (4L)e − 1, implying N + 1 ≥ 4L.
Claim 2. When at u for the first time, π is optimal for a baiting gadget
BG(u, v) with a parameter L > 1. After reaching v, it is suboptimal to
backtrack to u.
Proof. Denote by K the expected cost of the optimal policy executed once
v is reached. As there is an L cost shortcut edge (v, t), it is clear that K ≤ L
therefore it is always suboptimal to retrace g once v is reached. We first
show that C(π) < 1, hence choosing not to traverse (u, v1 ) is suboptimal.
Note that for every i ≤ N , the probability that (vi , vi+1 ) is traversed in
π is ( 12 )i . Hence we have
20

N

C(π) =

L X 1 i
1
( ) + ( )N K
N + 1 i=0 2
2

(A.1)

Thus
2L
(1 − 2−(N +1) ) + 2−N K
N +1
Then, as K ≤ L, N + 1 ≥ 4L and L > 1, we have that
C(π) =

C(π) <

2L
3
+ 2−N L < < 1.
4L
4

(A.2)

(A.3)

As required.
Next we show that for every j ≤ N , C(π) < C(πj ), hence for every
j ≤ N , the policy πj is suboptimal. We have that
j−1

C(πj ) =

1
jL
L X 1 i
( ) + ( )j (
+ Mj )
N + 1 i=0 2
2 N +1

(A.4)

Thus
2−j jL
2L
(1 − 2−j ) +
+ 2−j Mj
(A.5)
N +1
N +1
As K ≤ L, and 1 < Mj , it is sufficient from (A.2) to show that for every
0<j≤N
C(πj ) =

2L
2L
2−j jL
(1 − 2−(N +1) ) + 2−N L <
(1 − 2−j ) +
+ 2−j
N +1
N +1
N +1

(A.6)

Therefore
2L
(2−j − 2−(N +1) − 2−j−1 j) + 2−N L < 2−j
N +1
Hence we need to show that for every 0 < j ≤ N ,
2L
j
(1 − 2j−N −1 − ) + 2j−N L < 1
N +1
2
As N + 1 ≥ 4L and L > 1, it is sufficient to show that for every
0 < j ≤ N,
21

1
(2 − j) + 2j−N L < 1
4
And inequality (A.7) follows since the function

(A.7)

1
f (x) = (2 − x) + 2x−N L
4
over the reals, has only one extremum, f (0) < 1 ,f (N ) < 1 and
lim f (x) = lim f (x) = ∞

x→∞

x→−∞

Appendix A.2. Observation Gadgets
Let g = OG(u, v, o) be an observation gadget as defined in Section 3.2,
and seen in Fig. 3. Recall that L > 8, and L1 = 5L/8. πg is the following
partial policy for OG(u, v, o): At u, cross BG1 (observe (v1 , v4 )). Then cross
BG2 . If either (v1 , v4 ), or (v2 , v3 ) is found blocked, reach t by traversing the
3L/2 cost shortcut edge (v2 , t). However, if both (v1 , v4 ), and (v2 , v3 ) are
unblocked, traverse (v2 , v3 , o, v4 , v1 , v10 ) (at o, observe the edges incident on
o, in case there are any), and cross BG3 .
We again assume, by construction of the CTP-graph, that any policy at
u other than crossing BG1 results in a cost of at least 1.
Claim 3. When at u for the first time, πg is an optimal policy for g.
Proof. At u, as BG1 is a baiting gadget, then by Claim 2, it is optimal
to cross BG1 . When first arriving at v1 , after BG1 is crossed, (v1 , v4 ) is
observed. As (o, v4 ) has a cost of L1 > 1, and (v1 , v10 ) has a cost of 1, then
by Claim 2, it is optimal to cross BG2 . Once at v2 , if (v2 , v3 ) is blocked, it
is optimal to take the shortcut (v2 , t) for a cost of 3L/2.
It remains to show that if (v2 , v3 ) is unblocked, the optimal policy at v2
is:
1. if (v1 , v4 ) is unblocked, traverse (v2 , v3 , o, v4 , v1 , v10 ), and cross BG3 .
2. otherwise, traverse the shortcut (v2 , t) for a cost of 3L/2.
case 1: (v1 , v4 ) is unblocked.
First note that arriving at v1 a second time through (v4 , v1 ), BG1 and
BG2 are known not to have any blocked shortcut edges, hence by Claim 2,
22

the optimal policy when arriving at v1 a second time is to traverse (v1 , v10 )
and the baiting gadget BG3 .
Now, traversing (v2 , v3 , o, v4 , v1 , v10 ), and crossing BG3 bears an expected
cost of at most 2L1 + 2, while traversing (v2 , t) costs 3L/2. Hence, as
2L1 + 2 < 3L/2, it is optimal at v2 to traverse (v2 , v3 , o).
We now inspect the possible partial policies at o:
case 1.a: Traverse (o, v4 , v1 , v10 ), and cross BG3 for an expected cost of at
most L1 + 2. We denote this partial policy by π 0 .
case 1.b: Traverse edges of another observation gadget ge, in case there
exists such ge incident on o. Suppose that ge has not already been traversed (label the vertices of ge as vei ). Then traversing either (o, ve3 ) and
trying to traverse (e
v3 , ve2 ), or traversing (o, ve4 ) and trying to traverse
(e
v4 , ve1 ) results in an expected cost of at least L1 + 3L1 /4. Hence,
as L1 + 2 < L1 + 3L1 /4, we have that executing π 0 is cheaper than
traversing any edges of ge.
Next suppose that ge has already been traversed. Therefore we may
assume that the policy πge was executed in u
e, thus the baiting gadgets
of ge are known not to contain any unblocked zero-cost shortcuts, hence
crossing each such baiting gadget costs L. Then traversing ge results
in an expected cost of at least L1 + L, and as L1 + 2 < L1 + L, we
again have that executing π 0 is cheaper than traversing any edges of
ge.
case 1.c: Traverse the exam section path. Recall that o is identified with
r5 . Suppose that observation edge (r4 , r5 ) is blocked. At o, denote the
following partial policy by π1 : cross (r5 , r10 ); if (r10 , r20 ) is unblocked,
continue with any optimal policy, otherwise, return to o, and execute
π 0 , which can still be executed, for an expected cost of C(π 0 ) < L1 + 2.
Then we have
C(π1 ) ≥ 1 + p1 (1 + C(π 0 ))
and as p1 > 1 − 2/(3L + 1), we have that
C(π 0 ) < 1 + p1 (1 + C(π 0 )) < C(π1 )
Therefore executing π 0 is cheaper than executing π1 .
23

Now suppose that (r4 , r5 ) is unblocked. Then we can either execute π1
(or the symmetric case in which (r2 , r3 ) is being inspected) with the
same analysis, or we can extend π1 with the following policy denoted
by π2 :
execute π1 ; upon returning to o (after (r10 , r20 ) is found blocked), cross
(r5 , r4 ) and (r4 , r3 ); if (r3 , r2 ) is unblocked, continue with any optimal policy; otherwise return to r5 , and execute π 0 , which can still be
executed for an expected cost of C(π 0 ) < L1 + 2. Then we have that
C(π20 ) ≥ 1 + 2p1 + p21 (1 + C(π 0 ))
However, p1 > 1 − 2/(3L + 1) entails C(π 0 ) < C(π20 ). Therefore
executing π 0 is cheaper than executing π2 as well. The policy in which
(r2 , r3 ) is the first edge among (r2 , r3 ) and (r10 , r20 ) to be inspected is
symmetric to π2 . Hence we see that traversing any edges of the exam
section path is suboptimal.
case 2: (v1 , v4 ) is blocked.
In this case the following partial policies can be executed at v2 :
case 2.a: Take the shortcut edge (v2 , t) for a cost of 3L/2. Denote this
policy by π 0 .
case 2.b: Traverse (v2 , v3 ) and (v3 , o) for a cost of L1 and at o traverse edges
of another observation gadget. As in case 1.b we have that traversing
edges of ge results in an expected cost of at least L1 + 3L1 /4. Then,
as 3L/2 < L1 + L1 + 3L1 /4, we have that π 0 is cheaper than reaching
o and traversing any edges of ge.
case 2.c: Traverse (v2 , v3 ) and (v3 , o), for cost of L1 , and at o traverse the
exam path. We define π1 and π2 as in case 1.c. Recall that C(π 0 ) =
3L/2. However as p1 > 1 − 2/(3L + 1), we have that C(π 0 ) < L1 +
C(π1 ), and C(π 0 ) < L1 + C(π20 ). Hence π 0 is cheaper than traversing
to o and traversing the any edges of the exam section path.


24

Appendix B.
Appendix B.1. Behavior of reasonable policies
Claim 4. At r0 , any reasonable policy acts as follows. If all the edges in
the exam section were observed to be unblocked, cross
(r0 , r11 , · · · , r4m+1 , t) until reaching t for a cost of 2(m + 1). Otherwise, cross
the cost L shortcut edge (r0 , t).
Proof. Retracing BG(z0 , z1 ) clearly results in a cost of at least L. We
first see that unless all the edges in the exam section were observed to be
unblocked, any partial policy executed at r0 results in a cost of at least L,
therefore it is cheaper to take the shortcut (r0 , t) for a cost of L.
At every vertex ril , l ≤ m + 1, , i ≤ 5, any unblocked edge on the exam
section path, incident on ril , can be traversed. At r2l there is an additional
option to cross either BG(zl , zl+1 ), or BG(zl−1 , zl ) which hold no unblocked
shortcut edges, hence crossing these results in a cost of at least L. If r5l
is identified with an observation point of some observation gadget g 0 , there
is an additional option to traverse edges of g. However by an argument
identical to case 1.b of Appendix A.2, traversing any edges of g results in a
cost of at least L. Hence any deviation from the exam section path results
in a cost of at least L.
Suppose that all the edges of the exam section are known to be unblocked. Then, as the exam section contains 2(m + 1) always traversable
cost 1 edges, and as 2(m + 1) < L, the optimal policy is to cross the exam
section (r0 , r11 , · · · , t) for the cost of 2(m + 1).
Otherwise, suppose there are edges in the exam section with unknown
status. As all the guard edges were observed upon crossing the guard section,then such an edge is a clause edge. Hence let el = (r4l , r5l ) be the
first unknown clause edge such that every edge in the path (r0 , · · · , r4l )
is known to be unblocked. Finding (r4l , r5l ) blocked results in either retracing the exam section to r0 and taking the cost L shortcut to t, or in
deviating from the exam section. Hence, as (r3l , r4l ) costs 1, L > 1 and
p1 > 1 − 2/(3L + 1), traversing from r0 to el results in an expected cost
of at least 1 + p1 (1 + L) > L. Hence traversing the shortcut edge (v2 , t) is
cheaper. Obviously, the same argument holds for traversing el where el is
previously known to be blocked.

Appendix B.2. Polynomial size representation
We show the computation of h, the cost of the default edge (s, t). Recall
3L+1
that L = 8m + 16, N = 2dlog2 (4L)e − 1 and p1 = 1 − 2−dlog2 ( 2 )e .
25

From Section 3.4 we have that
1 n
h = B0 + ( ) 2 mPr0
4
and
B0 = Dst + Pr0 (Dpt + Prt 2(m + 1) + (1 − Prt )L)
where for a reasonable policy π, Pr0 is the probability of reaching r0 by
executing π, Dpt is the total cost from s to r0 while executing π in a full-trip
weather, Dst is the expected cost of executing π over shortcut weathers, and
Prt is the probability that all the edges in the exam section are unblocked.
From section 3.4, Prt = (1 − p1 )3m+2 and
19mL + 4
)n + (n + m + 1)L
4
Hence it is left to compute Pr0 and Dst . To do that we define the
following.
Dpt = 1 + (2 +

For k > 0, let G(k) be a CTP instance composed of a series of gadgets gi ,
1 ≤ i ≤ k, such that for every i < k, Exit(gi ) is identified with Entry(gi+1 ).
The gadgets in G(k) are either all baiting gadget with a parameter L > 1
(then G(k) is denoted by BG(L, k)), or are all observation gadgets (then
G(k) is denoted by OG(k)). Set s to be Entry(g1 ). Then we denote the
following policy for G(k) as πk : For every i ≤ k, cross gi .
Let q(G(k)) be the probability that Exit(gk ) is reached by executing πk .
Let w1 (G(k)) be the expected traversal cost when Exit(gk ) is reached while
executing πk . Let w2 (G(k)) be the expected cost in case a shortcut to t is
taken while executing πk . Then we have for k > 1
w2 (G(k)) = w2 (G(1)) + q(G(1))(w1 (G(1)) + w2 (G(k − 1)))

(B.1)

Next, if G(k) is a series of baiting gadgets we have that q(BG(L, k)) =
2
and w1 (BG(L, k)) = kL. From (A.2) we obtain:
−kN

2L
(1 − 2−(N +1) ) − 2−N L
N +1
If G(k) is a series of observation gadgets, set
w2 (BG(L, 1)) =

26

(B.2)

3
N1 = 2dlog2 ( 2 4L)e − 1

Then we have q(OG(k)) = 2−k(2N +N1 +4) , and w1 (OG(k)) =
compute w2 (OG(1)) to be:

k(19L+4)
.
4

We

w2 (OG(1)) = w2 (BG(L, 1)) + 2−N (w1 (BG(L, 1))
3L
3L
+2−N (w2 (BG( , 1))+2−N −N1 ( )+2−N −N1 −4 (2L1 +1+w2 (BG(L, 1)))))
2
2
(B.3)
We can now compute Pr0 . Assume w.l.o.g. n is even. Due to symmetry
of the true/false-paths, and the subsections of the variable sections, we have
that

Pr 0 =

 n2
3
q(BG(L, 1))q(OG(L, m)) q(BG(L, 1))q(OG(L, m))
q(BG(L, m+2))
4
(B.4)

To find Dst we note the following. Assume w.l.o.g n is even. Due to
symmetric considerations, there are parameters qst , wst and zst , independent
0
of i, such that by executing π at vi0 , vi+2
is reached with probability qst and
0
an expected cost of wst , and vi+2 is not reached (i.e. a shortcut it taken)
with an expected cost of zst . Assume w.l.o.g. the subsection Xi is universal.
Then
3
qst = q(BG(L, 1)) q(OG(L, m))q(BG(L, 1))q(OG(L, m))
4

(B.5)

and
wst = 2L + 4 + 2mw1 (OG(L, 1))

(B.6)

We now compute
1
3
zst = w2 (BG(L, 1)) + 2−N (w1 (BG(L, 1)) + L + (1 + w2 (OG(L, m))+
4
4
q(OG(L, m))(w1 (OG(L, m)) + 1 + w2 (BG(L, 1))+
2−N (w1 (BG(L, 1)) + 1 + w2 (OG(L, m)) + q(OG(L, m)) + 1)))) (B.7)
27

1
Now define z̄st = zst + qst wst , set Dst
= z̄st , and for every k > 1 set
k
1
k−1
Dst
= Dst
+ qst Dst

(B.8)

Then
n

n

Dst = Dst2 + (qst ) 2 w2 (BG(L, m + 1))
which concludes the computation of h.

28

(B.9)


