end function

function phi(x)
...
end
function P(phi)
x <- 0
while (phi(x)==TRUE)
x <- x+1
end while
return x
end function
Thus, for any hypothesis ∀xφ(x), P (φ) either gives us the smallest counterexample (in case the
hypothesis is false) or it never halts (in case the hypothesis is true).
The size of this program is length(pφq) + length(pP q) 1 , where pf q refers to the implementation
of function f . Here, length(pP q) isn’t very large, since it fits in 5 lines of code.
Therefore, should a counterexample to ∀xφ(x) exist, the Kolmogorov complexity of the smallest
counterexample is ≤ length(pφq) + length(pP q).
Therefore, in order to decide the truth of the universal, we only need to check the numbers whose
Kolmogorov Complexity ≤ length(pφq) + length(pP q). The Busy Beaver function gives us an
upper bound [?]: we only need to check numbers up to BB(length(pφq) + length(pP q)): if no
counterexample is found, none exist.
That is, the smallest counterexample is ≤ BB(length(pφq) + length(pP q)).

3 Bounding the size of the smallest proof
Now we turn to our original result:
Let the program T P be a theorem pump (a breadth-first search over all proofs): given a sentence T ,
it will search until it finds a proof of T . T P (T ) will either halt with the shortest proof (if there is a
proof), or never halt (if there isn’t).
The size of T P (T ) is length(pT q) + length(pT P q). Thus the KC of the shortest proof is ≤
length(pT q) + length(pT P q). Given this KC, the Busy Beaver function gives us an upper bound
on the length of the shortest proof: BB(length(pT q) + length(pT P q)). So we only need to check
proofs up to that size: if none is found, none exist.

4 Conclusion
In systems that are sound and complete, one could use either approach to decide the truth for any
given Π1 sentence. However, in interesting theories (namely, those that express PA), it follows from
Gödel’s 2nd incompleteness theorem that there will be sentences that are true in PA but not provable
in the theory.
Together, the above two procedures (counterexample search and proof search) can be combined
into a procedure for discovering Π1 Gödel sentences for any given axiom set T , i.e. sentences
that are unprovable in T (since no proof was found within our bound) but true in PA (since no
counterexample was found within the Chaitin bound).
1

We are omitting the log term for brevity. See Li & Vitanyi for an explanation of why this is needed.

2

Acknowledgements
The author thanks Shane Legg for comments.

References
G. J. Chaitin (1984) - Computing the Busy Beaver function. In Information, Randomness & Incompleteness, pages 74-76
C. Calude, H. Jürgensen and S. Legg (1999) - Solving Problems with Finite Test Sets. In Finite
versus Infinite: Contributions to an Eternal Dilemma, pages 39-52, Springer-Verlag, London
M. Li, P. Vitanyi (1997) - An Introduction to Kolmogorov Complexity and Its Applications. New
York: Springer-Verlag.
Solomon Feferman - Transfinite Recursive Progressions of Axiomatic Theories The Journal of Symbolic Logic, Vol. 27, No. 3 (Sep., 1962), pp. 259-316

3

